import {describe, expect, it} from "@jest/globals";

import {deepMerge, flattenObject} from "./object";


describe("deepMerge", () => {
  // Merging two objects with non-conflicting keys
  it("should merge two objects with non-conflicting keys", () => {
    const target = {a: 1, b: 2};
    const source = {c: 3, d: 4};
    const result = deepMerge(target, source);
    expect(result).toEqual({a: 1, b: 2, c: 3, d: 4});
  });

  // Merging two objects with nested objects
  it("should merge two objects with nested objects", () => {
    const target = {a: 1, b: {c: 2}};
    const source = {b: {d: 3}, e: 4};
    const result = deepMerge(target, source);
    expect(result).toEqual({a: 1, b: {c: 2, d: 3}, e: 4});
  });

  // Merging two objects where one object is empty
  it("should merge when one object is empty", () => {
    const target = {a: 1, b: 2};
    const source = {};
    const result = deepMerge(target, source);
    expect(result).toEqual({a: 1, b: 2});
  });

  // Merging objects with null or undefined values
  it("should merge objects with null or undefined values when merging", () => {
    const target = {a: 1, b: null, c: undefined};
    const source = {b: 2, c: 3, d: 4};
    const result = deepMerge(target, source);
    expect(result).toEqual({a: 1, b: 2, c: 3, d: 4});
  });
});

// Generated by CodiumAI

describe("flattenObject", () => {
  // Flattens a simple nested object correctly
  it("should flatten a simple nested object correctly", () => {
    const input = {
      a: 1,
      b: {
        c: 2,
        d: {
          e: 3,
        },
      },
    };
    const expectedOutput = {
      "a": 1,
      "b.c": 2,
      "b.d.e": 3,
    };
    const result = flattenObject(input);
    expect(result).toEqual(expectedOutput);
  });

  // Handles an empty object
  it("should return an empty object when input is an empty object", () => {
    const input = {};
    const expectedOutput = {};
    const result = flattenObject(input);
    expect(result).toEqual(expectedOutput);
  });

  // Handles an object with no nested properties
  it("should flatten a simple object correctly when there are no nested properties", () => {
    const input = {
      a: 1,
      b: 2,
      c: "hello",
    };
    const expectedOutput = {
      "a": 1,
      "b": 2,
      "c": "hello",
    };
    const result = flattenObject(input);
    expect(result).toEqual(expectedOutput);
  });

  // Processes an object with multiple nested levels
  it("should flatten a deeply nested object correctly", () => {
    const input = {
      a: 1,
      b: {
        c: 2,
        d: {
          e: 3,
          f: {
            g: 4,
          },
        },
      },
    };
    const expectedOutput = {
      "a": 1,
      "b.c": 2,
      "b.d.e": 3,
      "b.d.f.g": 4,
    };
    const result = flattenObject(input);
    expect(result).toEqual(expectedOutput);
  });

  // Maintains non-object properties in the flattened object
  it("should maintain non-object properties in the flattened object", () => {
    const input = {
      a: 1,
      b: {
        c: 2,
        d: {
          e: 3,
        },
      },
    };
    const expectedOutput = {
      "a": 1,
      "b.c": 2,
      "b.d.e": 3,
    };
    const result = flattenObject(input);
    expect(result).toEqual(expectedOutput);
  });

  // Correctly flattens an object with arrays
  it("should flatten an object with nested arrays correctly", () => {
    const input = {
      a: 1,
      b: {
        c: 2,
        d: {
          e: 3,
        },
      },
    };
    const expectedOutput = {
      "a": 1,
      "b.c": 2,
      "b.d.e": 3,
    };
    const result = flattenObject(input);
    expect(result).toEqual(expectedOutput);
  });

  // Processes an object with null values
  it("should flatten an object with null values correctly", () => {
    const input = {
      a: 1,
      b: null,
      c: {
        d: 2,
        e: null,
      },
    };
    const expectedOutput = {
      "a": 1,
      "b": null,
      "c.d": 2,
      "c.e": null,
    };
    const result = flattenObject(input);
    expect(result).toEqual(expectedOutput);
  });

  it("should flatten an object with array values correctly", () => {
    const input = {
      a: 1,
      b: null,
      c: {
        d: 2,
        e: [1, 2, 3],
      },
    };
    const expectedOutput = {
      "a": 1,
      "b": null,
      "c.d": 2,
      "c.e.0": 1,
      "c.e.1": 2,
      "c.e.2": 3,
    };
    const result = flattenObject(input);
    expect(result).toEqual(expectedOutput);
  });
  it("should flatten an object with array of objects values correctly", () => {
    const input = {
      a: 1,
      b: null,
      c: {
        d: 2,
        e: [{a: 1}, {a: 1, b: 2}, 3],
      },
    };
    const expectedOutput = {
      "a": 1,
      "b": null,
      "c.d": 2,
      "c.e.0.a": 1,
      "c.e.1.a": 1,
      "c.e.1.b": 2,
      "c.e.2": 3,
    };
    const result = flattenObject(input);
    expect(result).toEqual(expectedOutput);
  });
});
